// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot16.subsystems;

import org.usfirst.frc1073.robot16.Robot;
import org.usfirst.frc1073.robot16.RobotMap;
import org.usfirst.frc1073.robot16.commands.*;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DashboardSender extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final PowerDistributionPanel powerDistributionPanel1 = RobotMap.dashboardSenderPowerDistributionPanel1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DashboardPeriodic());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void sendBaseData() {
    	
    	// for dankboard dankness
    	
    	// ribot
        SmartDashboard.putNumber("lauchElev", Robot.laucher.getAngle());
        SmartDashboard.putNumber("defManip", Robot.defense.getAngle());
        SmartDashboard.putBoolean("piston", Robot.defense.isExtended());
        
        // what is this?
        SmartDashboard.putBoolean("Locking piston", Robot.laucher.isLocked());
        
        // match time
        SmartDashboard.putNumber("matchTime", Timer.getMatchTime());
        
        // dankmap
        /*int[][] fieldArray = Robot.navigation.getMap();
        int xc = 0; int yc = 0;
        double xtotal = 319.0; double ytotal = 649.0;
        for(double i = 0.0; i < fieldArray[0].length; i++) {
            for(double j = 0.0; j < fieldArray.length; j++) {
                if(fieldArray[(int)j][(int)i] == 1) {
                    xc = (int)(xtotal * (j / fieldArray.length));
                    yc = (int)(ytotal * (i / fieldArray[0].length));
                }
            }
        }
        SmartDashboard.putNumber("xcRobot", xc);
        SmartDashboard.putNumber("ycRobot", yc);*/
        
        // key to success : "the cheat sheet"
        //SmartDashboard.putNumber(key, value);
        

    }
}

