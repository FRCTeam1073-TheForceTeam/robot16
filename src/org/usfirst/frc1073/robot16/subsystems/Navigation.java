
// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc1073.robot16.subsystems;

import org.usfirst.frc1073.robot16.Robot;
import org.usfirst.frc1073.robot16.RobotMap;
import org.usfirst.frc1073.robot16.commands.NavManager;
import org.usfirst.frc1073.robot16.navClasses.Map;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.command.Subsystem;

public class Navigation extends Subsystem {

	private final double mapLengthX = 0.0; // TODO Should be constant
	private final double mapLengthY = 0.0; // TODO Should be constant
	private double robotStartX = 0.0;
	private double robotStartY = 0.0;
	Map gameMap;

	//TODO not in Robot Builder yet -Matt
	private final AnalogGyro navGyro = RobotMap.navGyro;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	/**
	 * 
	 * Makes the map object that holds game regions, the first time
	 * 
	 * @param robotStartX - 1/10 foot
	 * @param robotStartY - 1/10 foot
	 */
	public void initializeMap(double robotStartX, double robotStartY) {
		//Calls the map constructor, generates robot and defenses
		gameMap = new Map(robotStartX, robotStartY);

		//Calibrates the gyro
		RobotMap.navGyro.calibrate(); //IMPORTANT: ROBOT NEEDS TO STAY STATIONARY AFTER BOOT
		
		//Saves the starting value of the robot
		robotStartX = 0.0;
		robotStartY = 0.0;
		
		gameMap.initializeMap(robotStartX, robotStartY);
	}

	/**
	 * Changes the map to reflect the robot's change in position
	 * 
	 * @param xDistance
	 * @param yDistance
	 */
	public void updateMap() {
		//Prepares and sends updated values to the Map for updating
		double encoderAverage = (Robot.driveTrain.leftEncoderDistance() + Robot.driveTrain.rightEncoderDistance()) / 2;
		gameMap.updateRobotPosition(encoderAverage * Math.sin(navGyro.getAngle()), encoderAverage * Math.cos(navGyro.getAngle()));

	}
	/**
	 * Responsible for moving the robot to coordinates, provided 2 things:
	 * 1. Robot must be facing towards opposing alliance
	 * 2. Robot must be in front of a crossable obstacle
	 * 3. Robot must need to cross obstacles (can't navigate to destination inside neutral zone)
	 * Requirement 3 may be eliminated alter on
	 * 
	 * @param x - the final x position (10ths's of an inch)
	 * @param y - the final y position (10th's of an inch)
	 */
	public void moveTo(double x, double y){
		//Sets initial motor values
		double Vx = 0.9;
		double Vy = 0.9;
		//Sets angles
		double theta = navGyro.getAngle();
		double targetTheta = 0.0;
		//Initialized to distance from start to total clearance of opposing defense
		double targetDistance = 94;
		double distanceTravelled = 0.0;
		//TODO Needs to be calibrated
		final double k = 1.0;
		
		
		while(distanceTravelled < targetDistance){
			distanceTravelled = distanceTravelled + (Robot.driveTrain.leftEncoderDistance() + Robot.driveTrain.rightEncoderDistance()) / 2;
			theta = navGyro.getAngle();
			Vx = Vx * Math.cos(theta - targetTheta) + k * (Vx + Vy)/2 * Math.sin(theta - targetTheta);
			Vy = Vy * Math.cos(theta - targetTheta) + k * (Vx + Vy)/2 * Math.sin(theta - targetTheta);
			
			//Prevents motors from receiving weird values
			if(Vx >= 1.0){Vx = 1.0;}
			if(Vy >= 1.0){Vy = 1.0;}
			
			//TODO Method doesn't exist yet; Napes is writing it
			//Robot.driveTrain.getDriveCommand().move();
		}
		
		
		
		
	}
	

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		setDefaultCommand(new NavManager());

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}
}
