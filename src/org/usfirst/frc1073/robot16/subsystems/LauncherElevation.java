// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot16.subsystems;

import org.usfirst.frc1073.robot16.Robot;
import org.usfirst.frc1073.robot16.RobotMap;
import org.usfirst.frc1073.robot16.commands.*;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class LauncherElevation extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Solenoid launcherLock = RobotMap.launcherElevationlauncherLock;
    private final DigitalInput elevationHighLimit = RobotMap.launcherElevationelevationHighLimit;
    private final DigitalInput elevationLowLimit = RobotMap.launcherElevationelevationLowLimit;
    private final SpeedController elevationMotor = RobotMap.launcherElevationelevationMotor;
    private final AnalogPotentiometer elevationAngle = RobotMap.launcherElevationelevationAngle;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    private final boolean open = false;
	private final boolean closed = true;
	
	private final double ELEVATION_SPEED = 0.38;
    
    public LauncherElevation() {
    	elevationMotor.setInverted(Robot.invertLauncherElevation);
    }
    
	/*********************************
	 * 
	 * Elevates the motor up manually
	 * 
	 *********************************/
	public void elevateLauncherUp(double rate) {
		if (!isHighElevationHit())
			elevationMotor.set(ELEVATION_SPEED * rate); // rate is fraction of max elevation speed to move
		else
			stopElevationMotor();
	}

	/*********************************
	 * 
	 * Elevates the motor down manually
	 * 
	 *********************************/
	public void elevateLauncherDown(double rate) {
		if (!isLowElevationHit())
			elevationMotor.set(-ELEVATION_SPEED * rate);
		else
			stopElevationMotor();
	}

	/*********************************
	 * 
	 * Stops elevation
	 * 
	 *********************************/
	public void stopElevationMotor() {
		elevationMotor.set(0.0);
	}
    
	/***************************
	 * 
	 * returns elevation angle
	 * 
	 * @return angle in degrees
	 *
	 ***************************/
	public double getAngle() {
		return elevationAngle.get() * 360.0;
	}
    
	public void lockIt() {
		launcherLock.set(open);
	}

	public void unlockIt() {
		launcherLock.set(closed);
	}
	
	public boolean isLocked() {
		return launcherLock.get();
	}
	
	public boolean isLowElevationHit() {
		return !elevationLowLimit.get();
	}

	public boolean isHighElevationHit() {
		return !elevationHighLimit.get();
	}
	
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new LauncherMoveElevation());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

