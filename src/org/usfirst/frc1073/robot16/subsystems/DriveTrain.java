// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot16.subsystems;

import org.usfirst.frc1073.robot16.RobotMap;
import org.usfirst.frc1073.robot16.commands.*;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon leftMotor1 = RobotMap.driveTrainleftMotor1;
    private final CANTalon leftMotor2 = RobotMap.driveTrainleftMotor2;
    private final CANTalon rightMotor1 = RobotMap.driveTrainrightMotor1;
    private final CANTalon rightMotor2 = RobotMap.driveTrainrightMotor2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    boolean invertLeft = true;
    boolean invertRight = false;
    
    boolean invertLeftEncoder = false;
    boolean invertRightEncoder = false;
    
    public enum profiles {
    	SPEED,
    	POSITIONAL,
    	BASIC
    }
    
    private profiles current;
    
    private static final double MOTOR_TOP_RPM = 1169; // This is the top speed of the robot in RPM
    private static final double RAMP_RATE = 0; // in Volts/Second. This means if it is 12V/1sec it will reach full speed in 1 second    
    private static final double GEAR_RATIO = 11.0 / 8.0;
    private static final double WHEELE_RADIUS = 8.0; // in inches
    
    private static final double FINAL_RADIUS = WHEELE_RADIUS / GEAR_RATIO; // radius after gear ratio (in inches)
    
    /***************************
     * 
     * Constructs the driveTrain, which does the following:
     *   - starts robot in PIDSpeed mode
     *   - sets up motors
     *   - sets up encoders
     *   - sets up PID
     *   
     **************************/
    public DriveTrain() {
    	
    	current = profiles.SPEED;
    	
    	setupMotors();
    	setupEncoders();
    	setupPID();
    }
    
    /*****************************
     * 
     * Completes everything required for PID to work:
     *   - Sets encoder/potentiometer type
     *   - Sets the P, I, D, and F terms
     *   - configures min and max voltages
     * 
     *****************************/
    private void setupPID() {
    	leftMotor2.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	rightMotor1.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	
    	leftMotor2.configNominalOutputVoltage(+0f, -0f);
    	rightMotor1.configNominalOutputVoltage(+0f, -0f);
    	
    	leftMotor2.configPeakOutputVoltage(+12.0f, -12.0f);
    	rightMotor1.configPeakOutputVoltage(+12.0f, -12.0f);
    	
    	setPID(0.64, 0.006, 0.0, 0.36341);
    }
    
    /********************************
     * 
     * Configures motors:
     *   - Sets which side is inverted
     *   - Configures the secondary motors to be in follow mode
     *   - Sets ramp rate
     *   
     ********************************/
    private void setupMotors() {
    	leftMotor1.setInverted(invertLeft);
    	leftMotor2.setInverted(invertLeft);
    	rightMotor1.setInverted(invertRight);
    	rightMotor1.setInverted(invertRight);
    	
    	leftMotor1.changeControlMode(CANTalon.TalonControlMode.Follower);
    	leftMotor1.set(leftMotor2.getDeviceID());
    	rightMotor2.changeControlMode(CANTalon.TalonControlMode.Follower);
    	rightMotor2.set(rightMotor1.getDeviceID());
    	
    	leftMotor2.setVoltageRampRate(RAMP_RATE);
    	rightMotor1.setVoltageRampRate(RAMP_RATE);
    }
    
    /**********************************
     * 
     * Configures encoders:
     *   - Sets if the encoders are inverted
     *   - Configures tick count on encoders (ours are 360)
     *   
     **********************************/
    private void setupEncoders() {
    	
    	leftMotor2.reverseSensor(invertLeftEncoder);
    	rightMotor1.reverseSensor(invertRightEncoder);
    	
    	leftMotor2.configEncoderCodesPerRev(360);
    	rightMotor1.configEncoderCodesPerRev(360);
    }
    
    /**************************************
     * 
     * Sets the P, I, D, and F terms for both sides of driveTrain
     * 
     * @param p is the proportional term
     * @param i is the integral term
     * @param d is the derivative term
     * @param f is the feed-forward term
     * 
     **************************************/
    public void setPID(double p, double i, double d, double f) {
    	leftMotor2.setPID(p, i, d, f, 300, RAMP_RATE, 0);
    	rightMotor1.setPID(p, i, d, f, 300, RAMP_RATE, 0);
    }
    
    /**************************************
     * 
     * Does the configuration required for basic drive.
     * So, when switching to basic drive this gets called 
     * and now the robot will work with basic drive.
     * 
     **************************************/
    public void setBasic() {
    	
    	current = profiles.BASIC;
    	
    	leftMotor2.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
    	rightMotor1.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
    }
    
    /**************************************************
     * 
     * Basic move is non PID, so it is cubic drive in
     * percentVBus mode. -1 to 1
     * 
     * @param left is left drive value (+) for forward (-) for reverse
     * @param right is right drive value (+) for forward (-) for reverse
     * 
     **************************************************/
    public void moveBasic(double left, double right) {
    	
    	if(getState() != CANTalon.TalonControlMode.PercentVbus) setBasic();
    	
    	leftMotor2.set(left);
    	rightMotor1.set(right);
    }
    
    /**************************************
     * 
     * Does the configuration required for speed drive.
     * So, when switching to speed drive this gets called 
     * and now the robot will work with speed drive.
     * 
     **************************************/
    public void setSpeedMode() {
    	
    	current = profiles.SPEED;
    	
    	leftMotor2.setProfile(profiles.SPEED.ordinal());
    	rightMotor1.setProfile(profiles.SPEED.ordinal());
    	
    	leftMotor2.changeControlMode(CANTalon.TalonControlMode.Speed);
    	rightMotor1.changeControlMode(CANTalon.TalonControlMode.Speed);
    	
    }
    
    /**************************************************
     * 
     * PIDSpeed move is a velocity based PID. -1 to 1
     * 
     * @param leftSpeed is left drive value (+) for forward (-) for reverse
     * @param rightSpeed is right drive value (+) for forward (-) for reverse
     * 
     **************************************************/
    public void movePIDSpeed(double leftSpeed, double rightSpeed) {
    	
    	if(getState() != CANTalon.TalonControlMode.Speed) setSpeedMode();
    	
    	leftMotor2.set(leftSpeed * MOTOR_TOP_RPM); // Multiply by the top RPM because the -1 to 1 is the percent of the top RPM you would like to travel
    	rightMotor1.set(rightSpeed * MOTOR_TOP_RPM);
    	
    }
    
    /**************************************
     * 
     * Does the configuration required for positional drive.
     * So, when switching to positional drive this gets called 
     * and now the robot will work with positional drive.
     * 
     **************************************/
    public void setPositional() {
    	
    	current = profiles.POSITIONAL;
    	
    	leftMotor2.setProfile(profiles.POSITIONAL.ordinal());
    	rightMotor1.setProfile(profiles.POSITIONAL.ordinal());
    	
    	leftMotor2.changeControlMode(CANTalon.TalonControlMode.Position);
    	rightMotor1.changeControlMode(CANTalon.TalonControlMode.Position);
    }
    
    /**************************************************
     * 
     * PIDPositional move is a position based PID that
     * will move to a position some distance away from
     * current location
     * 
     * @param leftDistanceInches is left drive value (+) for forward (-) for reverse
     * @param rightDistanceInches is right drive value (+) for forward (-) for reverse
     * 
     **************************************************/
    public void movePIDPositional(double leftDistanceInches, double rightDistanceInches) {
    	
    	if(getState() != CANTalon.TalonControlMode.Position) setPositional();
    	
    	/********* POSITIONAL LOGIC NEEDS TO BE FIXED ***************
    	leftDistanceInches /= (FINAL_RADIUS * 2 * Math.PI);
    	rightDistanceInches /= (FINAL_RADIUS * 2 * Math.PI);
    	
    	double travelDistanceLeft = getLeftDistanceInches() + leftDistanceInches;
    	double travelDistanceRight = getRightDistanceInches() + rightDistanceInches; 
    	
    	leftMotor2.set(travelDistanceLeft);
    	rightMotor1.set(travelDistanceRight); */
    }
    
    /*************************************
     * 
     * Get current drive mode
     * 
     * @return current drive mode
     * 
     *************************************/
    public profiles getCurrentProfile() {
    	return current;
    }
    
    /**************************************
     * 
     * Sets new drive mode
     * 
     * @param newProfile is the new drive mode
     * 
     **************************************/
    public void setProfile(profiles newProfile) {
    	current = newProfile;
    }
    
    public CANTalon.TalonControlMode getState() {
    	return leftMotor2.getControlMode();
    }
    
    public boolean isPID() {
    	if(current == profiles.POSITIONAL || current == profiles.SPEED) return true;
    	else return false;
    }
    
    public double getLeftRawSpeed() {
    	return leftMotor2.getSpeed();
    }
    
    public double getLeftSpeedFps() {
    	return getLeftRawSpeed() * ((FINAL_RADIUS * 2 * Math.PI) / 720.0);
    }
    
    public double getLeftRawDistance() {
    	return leftMotor2.getPosition();
    }
    
    public double getLeftDistanceInches() {
    	return getLeftRawDistance() * (FINAL_RADIUS * 2 * Math.PI);
    }
    
    public double getRightRawSpeed() {
    	return rightMotor1.getSpeed();
    }
    
    public double getRightSpeedFps() {
    	return getRightRawSpeed() * ((FINAL_RADIUS * 2 * Math.PI) / 720.0);
    }
    
    public double getRightRawDistance() {
    	return rightMotor1.getPosition();
    }
    
    public double getRightDistanceInches() {
    	return getRightRawDistance() * (FINAL_RADIUS * 2 * Math.PI);
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new Drive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

