// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot16.subsystems;

import org.usfirst.frc1073.robot16.Robot;
import org.usfirst.frc1073.robot16.RobotMap;
import org.usfirst.frc1073.robot16.commands.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Encoder leftSideEncoder = RobotMap.driveTrainleftSideEncoder;
    private final Encoder rightSideEncoder = RobotMap.driveTrainrightSideEncoder;
    private final SpeedController leftMotor1 = RobotMap.driveTrainleftMotor1;
    private final SpeedController leftMotor2 = RobotMap.driveTrainleftMotor2;
    private final SpeedController rightMotor1 = RobotMap.driveTrainrightMotor1;
    private final SpeedController rightMotor2 = RobotMap.driveTrainrightMotor2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static PIDController leftMotor1PID;
    public static PIDController leftMotor2PID;
    public static PIDController rightMotor1PID;
    public static PIDController rightMotor2PID;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
private static final double INCHES_PER_PULSE = 0.017453; // Constant for the distance traveled per pulse
    
    // Sync groups information
    private byte leftSyncGroup = 0;
    private byte rightSyncGroup = 1;
    
    private boolean invertedInput = false;
    
    /****************************
     * 
     * Constructs DriveTrain
     * sets the distancePurPulse
     * 
     ****************************/
    public DriveTrain() {
    	leftSideEncoder.setDistancePerPulse(INCHES_PER_PULSE);
    	rightSideEncoder.setDistancePerPulse(INCHES_PER_PULSE);
    	leftMotor1.setInverted(Robot.inverseLeft);
    	leftMotor2.setInverted(Robot.inverseLeft);
    	rightMotor1.setInverted(Robot.inverseRight);
    	rightMotor2.setInverted(Robot.inverseRight);
    	
    	//PID Decelerations and setup
    	leftMotor1PID = new PIDController(Robot.driveTrainP, Robot.driveTrainI, 0, Robot.driveTrainD, leftSideEncoder, leftMotor1);
    	LiveWindow.addActuator("DriveTrain", "leftMotor1PID", leftMotor1PID);
    	leftMotor2PID = new PIDController(Robot.driveTrainP, Robot.driveTrainI, 0, Robot.driveTrainD, leftSideEncoder, leftMotor2);
    	LiveWindow.addActuator("DriveTrain", "leftMotor2PID", leftMotor2PID);
    	rightMotor1PID = new PIDController(Robot.driveTrainP, Robot.driveTrainI, 0, Robot.driveTrainD, rightSideEncoder, rightMotor1);
    	LiveWindow.addActuator("DriveTrain", "rightMotor1PID", rightMotor1PID);
    	rightMotor2PID = new PIDController(Robot.driveTrainP, Robot.driveTrainI, 0,Robot.driveTrainD, rightSideEncoder, rightMotor2);
    	LiveWindow.addActuator("DriveTrain", "rightMotor2PID", rightMotor2PID);
    	
    	leftMotor1PID.setPercentTolerance(Robot.driveTrainTolerance);
    	leftMotor1PID.setInputRange(-120.0, 120.0);
    	leftMotor1PID.setOutputRange(-1.0, 1.0);
    	
    	leftMotor2PID.setPercentTolerance(Robot.driveTrainTolerance);
    	leftMotor2PID.setInputRange(-120.0, 120.0);
    	leftMotor2PID.setOutputRange(-1.0, 1.0);
    	
    	rightMotor1PID.setPercentTolerance(Robot.driveTrainTolerance);
    	rightMotor1PID.setInputRange(-120.0, 120.0);
    	rightMotor1PID.setOutputRange(-1.0, 1.0);
    	
    	rightMotor2PID.setPercentTolerance(Robot.driveTrainTolerance);
    	rightMotor2PID.setInputRange(-120.0, 120.0);
    	rightMotor2PID.setOutputRange(-1.0, 1.0);
    }
    
    /*********************************************
     * 
     * Method to drive the robot.
     *	  @param left is the speed of left side
     * 	  @param right is the speed of right side
     * Values are between -1 and 1
     * 
     *********************************************/
    public void move(double left, double right){
    	leftMotor1.set(left, leftSyncGroup);
    	leftMotor2.set(left, leftSyncGroup);
    	rightMotor1.set(right, rightSyncGroup);
    	rightMotor2.set(right, rightSyncGroup);
    }
    
    /*********************************************
     * 
     * Method to drive the robot using PID.
     *	  @param left is the speed of left side
     * 	  @param right is the speed of right side
     * Values are between -1 and 1
     * 
     *********************************************/
    public void movePIDRate(double left, double right) {
    	
    	SmartDashboard.putString("DriveTrain P I D", leftMotor1PID.getP() + " " +leftMotor1PID.getI() + " " + leftMotor1PID.getD());
    	SmartDashboard.putNumber("left Setpoint", left);
    	SmartDashboard.putNumber("right setpoint", right);
    	setSetpoint(left, right);
    }
    
    /*********************************************
     * 
     * Method to drive the robot using PID distance.
     *	  @param left is the speed of left side
     * 	  @param right is the speed of right side
     * Values should be given in inches
     * 
     *********************************************/
    public void movePIDDistance(double left, double right) {
    	setSetpoint(left, right);
    }
    
    /***************************
     * 
     * Returns the rate of the
     * left side in FPS
     * 
     ***************************/
    public double getLeftRateFps() {
    	double rate = leftSideEncoder.getRate();
    	double left = rate;
    	left *= -1;
    	return left;
    }
    
    /***************************
     * 
     * Returns the rate of the
     * right side in FPS
     * 
     ***************************/
    public double getRightRateFps() {
    	double rate = rightSideEncoder.getRate();
    	double right = rate;
    	return right;
    }
    
    /***************************
     * 
     * Returns the distance of the
     * left side in feet
     * 
     ***************************/
    public double getLeftDistanceFeet(){
    	return leftSideEncoder.getDistance() / 12;
    }
    
    /***************************
     * 
     * Returns the distance of the
     * right side in feet
     * 
     ***************************/
    public double getRightDistanceFeet(){
    	return rightSideEncoder.getDistance() / 12;  			
    }
    
    /****************************
     * 
     * Switches left with right
     * and right with left
     * 
     ****************************/
	public void invertSticks() {
		invertedInput = !invertedInput;
	}
	
	/****************************
	 * 
	 * @return is the sticks are
	 * inverted
	 * 
	 *****************************/
	public boolean isInverted() {
		return invertedInput;
	}
	
	/*****************************
	 * 
	 * Toggles PID on or off
	 * 
	 *****************************/
	public void togglePID() {
		if(isPID()) disablePID();
		else enablePID();
	}
	
	/*****************************
	 * 
	 * Resets PID output term and
	 * Integral term
	 * 
	 *****************************/
	public void resetPID() {
		leftMotor1PID.reset();
		leftMotor2PID.reset();
		rightMotor1PID.reset();
		rightMotor2PID.reset();
	}
	
	/********************************
	 * 
	 * Since all four PID threads
	 * are always changed together,
	 * just going to use leftMotor1 
	 * 
	 * @return current state of PID
	 * being enabled or disabled
	 * 
	 ********************************/
	public boolean isPID() {
		return leftMotor1PID.isEnabled();
	}
	
	/*****************************
	 * 
	 * Enables PID
	 * 
	 *****************************/
	public void enablePID() {
		leftMotor1PID.enable();
		leftMotor2PID.enable();
		rightMotor1PID.enable();
		rightMotor2PID.enable();
	}
	
	/*****************************
	 * 
	 * Disables PID
	 * 
	 *****************************/
	public void disablePID() {
		resetPID();
		leftMotor1PID.disable();
		leftMotor2PID.disable();
		rightMotor1PID.disable();
		rightMotor2PID.disable();
	}
	
	/*****************************
	 * 
	 * Enables and starts PID in
	 * distance mode ideal for
	 * autonomous
	 * 
	 *****************************/
	public void startPIDAutonomous() {
		leftSideEncoder.setPIDSourceType(PIDSourceType.kDisplacement);
		rightSideEncoder.setPIDSourceType(PIDSourceType.kDisplacement);
		
		resetPID();
		enablePID();
	}
    
	/*****************************
	 * 
	 * Enables and starts PID in
	 * rate mode ideal for teleop
	 * 
	 *****************************/
	public void startPIDTeleop() {
		leftSideEncoder.setPIDSourceType(PIDSourceType.kRate);
		rightSideEncoder.setPIDSourceType(PIDSourceType.kRate);
		
		resetPID();
		enablePID();
	}
	
	public void setSetpoint(double left, double right) {
		leftMotor1PID.setSetpoint(left);
		leftMotor2PID.setSetpoint(left);
		rightMotor1PID.setSetpoint(right);
		rightMotor2PID.setSetpoint(right);
	}
	
	public void setPID(double P, double I, double D) {
		leftMotor1PID.setPID(P, I, D);
		leftMotor2PID.setPID(P, I, D);
		rightMotor1PID.setPID(P, I, D);
		rightMotor2PID.setPID(P, I, D);
	}
	
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new Drive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

