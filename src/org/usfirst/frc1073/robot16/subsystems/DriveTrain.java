// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot16.subsystems;

import org.usfirst.frc1073.robot16.Robot;
import org.usfirst.frc1073.robot16.RobotMap;
import org.usfirst.frc1073.robot16.commands.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Encoder leftSideEncoder = RobotMap.driveTrainleftSideEncoder;
    private final Encoder rightSideEncoder = RobotMap.driveTrainrightSideEncoder;
    private final SpeedController leftMotor1 = RobotMap.driveTrainleftMotor1;
    private final SpeedController leftMotor2 = RobotMap.driveTrainleftMotor2;
    private final SpeedController rightMotor1 = RobotMap.driveTrainrightMotor1;
    private final SpeedController rightMotor2 = RobotMap.driveTrainrightMotor2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
private static final double INCHES_PER_PULSE = 0.017453; // Constant for the distance traveled per pulse
    
    // Sync groups information
    private byte leftSyncGroup = 0;
    private byte rightSyncGroup = 1;
    
    private boolean invertedInput = false;
    
    /****************************
     * 
     * Constructs DriveTrain
     * sets the distancePurPulse
     * 
     ****************************/
    public DriveTrain() {
    	leftSideEncoder.setDistancePerPulse(INCHES_PER_PULSE);
    	rightSideEncoder.setDistancePerPulse(INCHES_PER_PULSE);
    	leftMotor1.setInverted(Robot.inverseLeft);
    	leftMotor2.setInverted(Robot.inverseLeft);
    	rightMotor1.setInverted(Robot.inverseRight);
    	rightMotor2.setInverted(Robot.inverseRight);
    }
    
    /***************************
     * 
     * Returns the rate of the
     * left side in FPS
     * 
     ***************************/
    public double getLeftRateFps() {
    	double rate = leftSideEncoder.getRate();
    	double left = (rate) / 12; // divide by 12 to convert to feet
    	left *= -1;
    	return left;
    }
    
    /***************************
     * 
     * Returns the rate of the
     * right side in FPS
     * 
     ***************************/
    public double getRightRateFps() {
    	double rate = rightSideEncoder.getRate();
    	double right = rate / 12; // divide by 12 to convert to feet
    	return right;
    }
    
    /*********************************************
     * 
     * Method to drive the robot.
     *	  @param left is the speed of left side
     * 	  @param right is the speed of right side
     * Values are between -1 and 1
     * 
     *********************************************/
    public void move(double left, double right){
    	leftMotor1.set(left, leftSyncGroup);
    	leftMotor2.set(left, leftSyncGroup);
    	rightMotor1.set(right, rightSyncGroup);
    	rightMotor2.set(right, rightSyncGroup);
    }
    
    public double getLeftDistanceFeet(){
    	return leftSideEncoder.getDistance() / 12;
    }
    
    public double getRightDistanceFeet(){
    	return rightSideEncoder.getDistance() / 12;  			
    }
    
	public void invertSticks() {
		invertedInput = !invertedInput;
	}
	
	public boolean isInverted() {
		return invertedInput;
	}
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new Drive());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

