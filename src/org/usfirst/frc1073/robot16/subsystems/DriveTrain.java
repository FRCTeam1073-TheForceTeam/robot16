// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot16.subsystems;

import org.usfirst.frc1073.robot16.subsystems.PIDSubsystem;
import org.usfirst.frc1073.robot16.Robot;
import org.usfirst.frc1073.robot16.RobotMap;
import org.usfirst.frc1073.robot16.commands.*;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrain extends Subsystem implements PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController leftMotor1 = RobotMap.driveTrainleftMotor1;
    private final SpeedController leftMotor2 = RobotMap.driveTrainleftMotor2;
    private final SpeedController rightMotor1 = RobotMap.driveTrainrightMotor1;
    private final SpeedController rightMotor2 = RobotMap.driveTrainrightMotor2;
    private final Encoder leftSideEncoder = RobotMap.driveTrainleftSideEncoder;
    private final Encoder rightSideEncoder = RobotMap.driveTrainrightSideEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    double cubicConstant = Robot.cubicScale;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    /***************************************
     * 
     * Method to scale a joystick value.
     *    @param arg is the joystick value
     *
     ***************************************/
    private double cubicScale(double arg){
    	return (cubicConstant*arg + (1 - cubicConstant) * Math.pow((double)arg, 3));
    }
    
    /*********************************************
     * 
     * Method to drive the robot.
     *	  @param left is the speed of left side
     * 	  @param right is the speed of right side
     * Values are between -1 and 1
     * 
     *********************************************/
    public void move(double left, double right){
    	if(Robot.inverseLeft) left *= -1;
    	if(Robot.inverseRight) right *= -1;
    	
    	SmartDashboard.putNumber("Before Cubic Left", left);
    	SmartDashboard.putNumber("Before Cubic Right", right);
    	
    	left = cubicScale(left);
    	right = cubicScale(right);
    	
    	SmartDashboard.putNumber("After Cubic Left", left);
    	SmartDashboard.putNumber("After Cubic Right", right);
    	
    	leftMotor1.set(left);
    	leftMotor2.set(left);
    	rightMotor1.set(right);
    	rightMotor2.set(right);
    }
    
    /*
     * Beginning of methods for use from Navigation.
     * Uses DriveTrain hardware for nav processing
     * 
     * @author Matt
     */
    
    //TODO Totally arbitrary, needs to be calibrated for distance
    private final double wheelRadiusConstant = 2.0;
    
    public double leftEncoderDistance(){
    	return leftSideEncoder.getDistance() * wheelRadiusConstant;
    }
    public double rightEncoderDistance(){
    	return rightSideEncoder.getDistance() * wheelRadiusConstant;  			
    }
    public double leftEncoderRate(){
    	return leftSideEncoder.getRate() * wheelRadiusConstant;
    }
    public double rightEncoderRate(){
    	return rightSideEncoder.getRate() * wheelRadiusConstant;
    }
    
    //End Navigation Accessor Methods
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new Drive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

	@Override
	public double getPIDSource(int marker) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void setPIDOutput(double output, int marker) {
		// TODO Auto-generated method stub
		
	}
}

