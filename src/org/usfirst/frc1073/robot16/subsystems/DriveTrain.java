// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot16.subsystems;

import org.usfirst.frc1073.robot16.RobotMap;
import org.usfirst.frc1073.robot16.commands.*;

import edu.wpi.first.wpilibj.SpeedController;
//import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc1073.robot16.Robot;


public class DriveTrain extends Subsystem {
	
	SpeedController leftMotor1 = RobotMap.driveTrainleftMotor1;
    SpeedController leftMotor2 = RobotMap.driveTrainleftMotor2;
    SpeedController leftMotor3 = RobotMap.driveTrainleftMotor3;
    SpeedController rightMotor4 = RobotMap.driveTrainrightMotor4;
    SpeedController rightMotor5 = RobotMap.driveTrainrightMotor5;
    SpeedController rightMotor6 = RobotMap.driveTrainrightMotor6;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    
    private final double cubicConstant = Robot.cubicScale;
    private final double deadZone = Robot.deadZone;
    private byte leftSyncGroup = 1;
    private byte rightSyncGroup = 0;
    
    // All of the following are purely for testing information and mostly dddcopies of values to be printed and not modified
	private double testLeftMagnitude;
	private double testRightMagnitude;
	private double testCubedLeftMagnitude;
	private double testCubedRightMagnitude;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new Drive());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    /***************************************
     * 
     * Method to scale a joystick value.
     *    @param arg is the joystick value
     *
     ***************************************/
    private double cubicScale(double arg){
    	return (cubicConstant*arg + (1 - cubicConstant) * Math.pow((double)arg, 3));
    }
    

    /*************************************************
     * 
     * Method to move the robot. Uses a tank drive
     * style.
     * 	  @param leftMagnitude is the left joystick Y axis
     *    @param rightMagnitude is the right joystick Y axis
     *    
     *************************************************/
    public void move (double leftMagnitude, double rightMagnitude){
    	leftMagnitude *= Robot.scale;
    	rightMagnitude *= Robot.scale;
    	
    	//testing stuff
    	testLeftMagnitude = leftMagnitude;
    	testCubedLeftMagnitude = cubicScale(leftMagnitude);
    	testRightMagnitude = rightMagnitude;
    	testCubedRightMagnitude = cubicScale(rightMagnitude);
    	
    	// dead zone check and set
    	if(leftMagnitude <= deadZone && leftMagnitude >= -deadZone) leftMagnitude = 0.0;
    	if(rightMagnitude <= deadZone && rightMagnitude >= -deadZone) rightMagnitude = 0.0;
    	
    	setMotors(side.LEFT, cubicScale(leftMagnitude));
    	setMotors(side.RIGHT, cubicScale(rightMagnitude));
    }
    
    private enum side { LEFT, RIGHT }; // Sides of robot
    
    /***********************************************
     * 
     * Method to set all of one side with a value.
     * @param side which side LEFT or RIGHT
     * @param val is the x value from the joystick
     ***********************************************/
    public void setMotors(side side, double val){
    	switch(side){
    	 case LEFT:
    		 if(Robot.invertLeft) val *= -1; // Inverts the direction by making it negative
    		 leftMotor3.set(val, leftSyncGroup);
    		 leftMotor2.set(val, leftSyncGroup);
    		 leftMotor1.set(val, leftSyncGroup);
    	 break;
    	 case RIGHT:
    		 if(Robot.invertRight) val *= -1; // Inverts the direction by making it negative
    		 rightMotor4.set(val, rightSyncGroup);
    		 rightMotor5.set(val, rightSyncGroup);
    		 rightMotor6.set(val, rightSyncGroup);
    	 break;
    	}
    }
    
    // Uses test values and current values to print information to the dashboard while testing
    public void printTestInfo(){
    	
    	// Joystick values
    	SmartDashboard.putNumber("left joystick Y: ", testLeftMagnitude);
    	SmartDashboard.putNumber("right joystick Y: ", testRightMagnitude);
    	SmartDashboard.putNumber("left joystick cubed Y: ", testCubedLeftMagnitude);
    	SmartDashboard.putNumber("right joystick cubed Y: ", testCubedRightMagnitude);
    	
    	// Motor values
    	SmartDashboard.putNumber("current leftMotor1 val: ", leftMotor1.get());
    	SmartDashboard.putNumber("current leftMotor2 val: ", leftMotor2.get());
    	SmartDashboard.putNumber("current leftMotor3 val: ", leftMotor3.get());
    	SmartDashboard.putNumber("current rightMotor4 val: ", rightMotor4.get());
    	SmartDashboard.putNumber("current rightMotor5 val: ", rightMotor5.get());
    	SmartDashboard.putNumber("current rightMotor6 val: ", rightMotor6.get());	
    }
}
