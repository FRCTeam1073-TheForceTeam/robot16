// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot16;

import org.usfirst.frc1073.robot16.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc1073.robot16.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton flashLightToggleBut;
    public JoystickButton toggleOrientation;
    public Joystick driverLeftStick;
    public JoystickButton togglePID;
    public Joystick driverRightStick;
    public JoystickButton launcherFireBut;
    public JoystickButton launcherPrimeBut;
    public JoystickButton launcherManualElevationBut;
    public JoystickButton launcherLowGoalBut;
    public JoystickButton launcherPresetLongBut;
    public JoystickButton launcherPresetShortBut;
    public JoystickButton launcherCollectBut;
    public JoystickButton setManualModeBut;
    public JoystickButton setNormalPIDModeBut;
    public JoystickButton defenseManualElevationBut;
    public Joystick operatorStick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        operatorStick = new Joystick(2);
        
        defenseManualElevationBut = new JoystickButton(operatorStick, 2);
        defenseManualElevationBut.whileHeld(new DefenseMoveElevation());
        setNormalPIDModeBut = new JoystickButton(operatorStick, 12);
        setNormalPIDModeBut.whenPressed(new SetNormalPIDMode());
        setManualModeBut = new JoystickButton(operatorStick, 11);
        setManualModeBut.whenPressed(new SetManualMode());
        launcherCollectBut = new JoystickButton(operatorStick, 9);
        launcherCollectBut.whileHeld(new LauncherCollectGroup());
        launcherPresetShortBut = new JoystickButton(operatorStick, 7);
        launcherPresetShortBut.whenPressed(new LauncherPreset(2));
        launcherPresetLongBut = new JoystickButton(operatorStick, 6);
        launcherPresetLongBut.whenPressed(new LauncherPreset(1));
        launcherLowGoalBut = new JoystickButton(operatorStick, 4);
        launcherLowGoalBut.whileHeld(new LauncherLowGoal());
        launcherManualElevationBut = new JoystickButton(operatorStick, 3);
        launcherManualElevationBut.whileHeld(new LauncherManualElevation());
        launcherPrimeBut = new JoystickButton(operatorStick, 1);
        launcherPrimeBut.whenReleased(new LauncherPrime());
        launcherFireBut = new JoystickButton(operatorStick, 1);
        launcherFireBut.whileHeld(new LauncherFire());
        driverRightStick = new Joystick(1);
        
        togglePID = new JoystickButton(driverRightStick, 1);
        togglePID.whenPressed(new DriveTrainTogglePID());
        driverLeftStick = new Joystick(0);
        
        toggleOrientation = new JoystickButton(driverLeftStick, 1);
        toggleOrientation.whenPressed(new DriveTrainToggleOrientation());
        flashLightToggleBut = new JoystickButton(driverLeftStick, 4);
        flashLightToggleBut.whenPressed(new LauncherFlashLightToggle());


        // SmartDashboard Buttons

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getdriverLeftStick() {
        return driverLeftStick;
    }

    public Joystick getdriverRightStick() {
        return driverRightStick;
    }

    public Joystick getoperatorStick() {
        return operatorStick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

