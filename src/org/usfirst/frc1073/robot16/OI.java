package org.usfirst.frc1073.robot16;

import org.usfirst.frc1073.robot16.commands.*;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton defenseConfigurationBut;
    public JoystickButton toggleCubic;
    public Joystick driverLeftStick;
    public JoystickButton switchOrientationBut;
    public JoystickButton togglePID;
    public JoystickButton lowBarConfigurationButton;
    public Joystick driverRightStick;
    public JoystickButton lowGoalBut;
    public JoystickButton allowAdjustLaucherBut;
    public JoystickButton allowAdjustWinchBut;
    public JoystickButton deployScissorLiftBut;
    public JoystickButton lauchBut;
    public JoystickButton pistonBut;
    public JoystickButton defenseArmToggle;
    public JoystickButton laucherToggleReleaseButton;
    public Joystick operatorStick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        operatorStick = new Joystick(2);
        
        laucherToggleReleaseButton = new JoystickButton(operatorStick, 31);
        laucherToggleReleaseButton.whenPressed(new LaucherReleaseToggle());
        defenseArmToggle = new JoystickButton(operatorStick, 11);
        defenseArmToggle.whenPressed(new DefenseArmToggle());
        pistonBut = new JoystickButton(operatorStick, 1);
        pistonBut.whenPressed(new ManualPistonToggle());
        lauchBut = new JoystickButton(operatorStick, 7);
        lauchBut.whenPressed(new LauchBoulder());
        deployScissorLiftBut = new JoystickButton(operatorStick, 3);
        deployScissorLiftBut.whileHeld(new DeployScissorLift());
        allowAdjustWinchBut = new JoystickButton(operatorStick, 2);
        allowAdjustWinchBut.whileHeld(new AdjustWinch());
        allowAdjustLaucherBut = new JoystickButton(operatorStick, 10);
        allowAdjustLaucherBut.whileHeld(new AdjustLaucher());
        lowGoalBut = new JoystickButton(operatorStick, 8);
        lowGoalBut.whileHeld(new Purge());
        driverRightStick = new Joystick(1);
        
        lowBarConfigurationButton = new JoystickButton(driverRightStick, 4);
        lowBarConfigurationButton.whenPressed(new LowBarConfigurationOn());
        togglePID = new JoystickButton(driverRightStick, 2);
        togglePID.whenPressed(new TogglePID());
        switchOrientationBut = new JoystickButton(driverRightStick, 1);
        switchOrientationBut.whenPressed(new SwitchOrientation());
        driverLeftStick = new Joystick(0);
        
        toggleCubic = new JoystickButton(driverLeftStick, 1);
        toggleCubic.whenPressed(new ToggleCubic());
        defenseConfigurationBut = new JoystickButton(driverLeftStick, 5);
        defenseConfigurationBut.whenPressed(new DefenseConfigurationOn());


        // SmartDashboard Buttons
        SmartDashboard.putData("NavManager", new NavManager());
        SmartDashboard.putData("LockLaucher", new LockLaucher());
        SmartDashboard.putData("UnlockLaucher", new UnlockLaucher());
        SmartDashboard.putData("RaiseToChevalAngle", new RaiseToChevalAngle());
        SmartDashboard.putData("DashboardPeriodic", new DashboardPeriodic());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getdriverLeftStick() {
        return driverLeftStick;
    }

    public Joystick getdriverRightStick() {
        return driverRightStick;
    }

    public Joystick getoperatorStick() {
        return operatorStick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

