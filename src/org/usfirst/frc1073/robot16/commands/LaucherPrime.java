// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


//NOTE: THIS COMMAND NEEDS BUTTONMAPPING.

package org.usfirst.frc1073.robot16.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1073.robot16.Robot;
import org.usfirst.frc1073.robot16.subsystems.Laucher.laucherState;

/**
 *
 */
public class LaucherPrime extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	
    private final double TravelTimeShort = 8;
    private final double TravelTimeLong = TravelTimeShort * 2;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public LaucherPrime() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.laucher);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.laucher.updateCurrentState();
    	
    	switch(Robot.laucher.getState()){
    		case readyToLauch:
    		case closedForwards: 
    		case closedMiddle:
    			setTimeout(TravelTimeShort);
    			break;
    		case emptyMiddle:
    		case emptyForwards: 
    		case emptyBackwards:
    			setTimeout(TravelTimeLong);
    			break;
    		default:
    			setTimeout(0);
    			break;
    	}
    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	switch(Robot.laucher.getState()){
	    	case closedForwards: 
	    		Robot.laucher.driveLaucherMotorBackwards();
	    		Robot.laucher.setCurrentState(laucherState.closedMiddle);
	    		break;
	    	case closedMiddle:
	    		if(Robot.laucher.isBackLimitHit()) {
	    			Robot.laucher.stopLaucherMotor();
	    			Robot.laucher.setCurrentState(laucherState.readyToLauch);
	    		}
	    		else {
	    			Robot.laucher.driveLaucherMotorBackwards();
	    		}
	    		break;
	    	case readyToLauch:
	    		Robot.laucher.stopLaucherMotor();
	    		break;
	    	case emptyForwards:
	    		Robot.laucher.stopLaucherMotor();
	    		Robot.laucher.closeClamp();
	    		Robot.laucher.setCurrentState(laucherState.closedForwards);
	    		break;
	    	case emptyBackwards:
	    		Robot.laucher.driveLaucherMotorForwards();
	    		Robot.laucher.setCurrentState(laucherState.emptyMiddle);
	    		break;
	    	case emptyMiddle:
	    		Robot.laucher.driveLaucherMotorForwards();
	    		if (Robot.laucher.isFrontLimitHit()){
	        		Robot.laucher.stopLaucherMotor();
	    			Robot.laucher.closeClamp();
	        		Robot.laucher.setCurrentState(laucherState.closedForwards);
	    		}
	    		break;
	    	default:
	    		break;
	    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	if (Robot.laucher.getState().equals(laucherState.readyToLauch)){
    		Robot.laucher.stopLaucherMotor();
			Robot.laucher.setCurrentState(laucherState.readyToLauch);
    		return true;
    	}
    	else if (isTimedOut()) {
    		Robot.laucher.updateCurrentState();
    		Robot.laucher.stopLaucherMotor();
    		return true;
    	}
    	else {
	    	return false;
    	}
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.laucher.stopLaucherMotor();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
