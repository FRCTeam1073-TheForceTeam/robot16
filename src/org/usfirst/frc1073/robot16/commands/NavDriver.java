// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc1073.robot16.commands;

import org.usfirst.frc1073.robot16.Robot;
import org.usfirst.frc1073.robot16.RobotMap;

import edu.wpi.first.wpilibj.command.Command;

/**
 *
 */
public class NavDriver extends Command {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public NavDriver() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.navigation);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}
	
	//Initializes values for future use
	public double theta;
	double targetTheta;
	double targetDistance;
	double distanceTravelled;
	double Vx;
	double Vy;
	
	//TODO Needs to be calibrated, describes the aggression of drive correction algorithm
	final double k = 1.0;

	// Called just before this Command runs the first time
	protected void initialize() {
		
		//Sets initial angles
		theta = RobotMap.navGyro.getAngle();
		targetTheta = 0.0;
		
		//Initialized to the distance from robot start to total clearance of opposing defense
		targetDistance = 94;		
		distanceTravelled = 0.0;
		
		//Sets initial motor values
		Vx = 0.75;
		Vy = 0.75;
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute(){
		if(Robot.isNavigatingGlobal){moveToTarget();}
		else{defenseTransition();}		
	}
	
	/*
	 * execute() will switch between running defenseTransisiton and moveToTarget(),
	 * depending on the state of a boolean which will be navigated in execute() and
	 * changed by the autonomous command
	 */
	private void defenseTransition() {
		//TODO Make sure units from drive train are correct
		distanceTravelled = distanceTravelled + (Robot.driveTrain.leftEncoderDistance() + Robot.driveTrain.rightEncoderDistance()) / 2;
		
		//Updates gyro angle
		theta = RobotMap.navGyro.getAngle();
		
		//Modifies voltage output to motors based on a drift correction algorithm
		Vx = Vx * Math.cos(theta - targetTheta) + k * (Vx + Vy)/2 * Math.sin(theta - targetTheta);
		Vy = Vy * Math.cos(theta - targetTheta) + k * (Vx + Vy)/2 * Math.sin(theta - targetTheta);
		
		//Prevents motors from receiving weird values outside their threshold 
		if(Vx >= 1.0){Vx = 1.0;}
		if(Vy >= 1.0){Vy = 1.0;}
		
		//Physically moves the robot using the PID move method
		Robot.driveTrain.getDriveCommand().movePID(Vx,Vy);
	}
	private void moveToTarget() {}
	
	
	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
