

// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot16.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1073.robot16.Robot;

/**
 *
 */
public class LowBarDrive extends Command {
    private double initialLeftEnc = Robot.driveTrain.leftEncoderDistance();
    private double initialRightEnc = Robot.driveTrain.rightEncoderDistance();
    
    
    private double lastLeftEnc = 0;
    private double lastRightEnc = 0;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public LowBarDrive() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
    }
    
    

    // Called just before this Command runs the first time
    protected void initialize() {
    	setTimeout(5);
    	Robot.driveTrain.move(1, 1);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	double leftEnc = Robot.driveTrain.leftEncoderDistance();
    	double rightEnc = Robot.driveTrain.rightEncoderDistance();
    	
    
    	double leftTraveled = leftEnc - initialLeftEnc; 
    	double rightTraveled = rightEnc - initialRightEnc;
    	
    	double leftPower, rightPower;
    	
    	if ((rightTraveled < 36) && (leftTraveled < 36)) {
    		leftPower = rightPower = 0.8;
    	}
    	else if ((rightTraveled < 72) && (leftTraveled < 72)) {
    		leftPower = rightPower = 0.5;
    	}
    	else {
    		leftPower = rightPower = 0.2;
    	}
    		
    	if (rightTraveled - leftTraveled > 3) {
    		leftPower += 0.05;
    	}
    	else if (leftTraveled - rightTraveled > 3) {
    		rightPower += 0.05;
    	}
    	
		Robot.driveTrain.move(leftPower, rightPower);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	double leftEnc = Robot.driveTrain.leftEncoderDistance();
    	double rightEnc = Robot.driveTrain.rightEncoderDistance();
    	
    
    	double leftTraveled = leftEnc - initialLeftEnc; 
    	double rightTraveled = rightEnc - initialRightEnc;

    	if ((rightTraveled >= 96 && leftTraveled >= 96) || isTimedOut()) {
    		return true;
    	}
    	else {
    		return false;
    	}
    }

    // Called once after isFinished returns true
    protected void end() {
		Robot.driveTrain.move(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
